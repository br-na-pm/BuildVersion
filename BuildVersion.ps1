# File: 
#   BuildVersion.ps1
# Authors:
#   Wesley Buchanan
#   Tyler Matijevich
#   Connor Trostel
# Date: 
#   2022-03-21

$ScriptName = $MyInvocation.MyCommand.Name
Write-Host "BuildVersion: Running $ScriptName powershell script"

#################
# Check Arguments
#################
if($args.Length -ne 6) {
    Write-Host "BuildVersion: Please include all six arguments in pre-build event field. See BuildVersion help"
    exit 1
}

############
# Parameters
############

# Set paths to local and global variable (IEC 61131-3) declaration files
# If the global file exists, this script will look for a declaration matching the 
#   type declared in BuildVersion.typ and automatically initialize the variable
# If the local file exits, the whole file will be overwritten with an initialization
$GlobalVariableFile = $args[0] + "\Logical\Global.var"
$LocalVariableFile = $args[0] + "\Logical\BuildVersion\BuildVer\Variables.var" 
$LocalProgramDirectory = $args[0] + "\Logical\BuildVersion\BuildVer\"
$TypeIdentifier = "BuildVersionType"

#####################
# Generate local file
#####################
# If the script fails before generating the local variable file, the build can error
# Generate the local variable file without initialization to avoid build errors
$FileDate = Get-Date -Format "yyyy-MM-dd-HH:mm:ss"
if([System.IO.Directory]::Exists($LocalProgramDirectory)) {
    $FileContent = @"
(*This file was automatically generated by $ScriptName on $FileDate.*)
(*Do not modify the contents of this file.*)
VAR
    BuildVersion : BuildVersionType; (*Please install Git and create repository to initialize*)
END_VAR
"@
    Set-Content -Path $LocalVariableFile $FileContent
}

###########
# Functions
###########

# Truncate strings to match size of type declaration
function TruncateString {
    param ([String]$String,[Int]$Length)
    $String.Substring(0,[System.Math]::Min($Length,$String.Length))
}

################################################################################
################################################################################
################################################################################
# Git Commands
################################################################################
################################################################################
################################################################################

# Is git command available? Use `git version`
try {git version *> $Null} 
catch {
    Write-Host "BuildVersion: Git in not installed or is not available in PATH environment. Please install Git (https://git-scm.com/) with recommended option for PATH"
    return
}

# Is the project in a repository? Use `git config --list --local`
git -C $args[0] config --list --local *> $Null 
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: No local repository has been found in the project root. Please initialize a repository with Git"
    return
}

############
# Remote URL
############
# References:
# https://reactgo.com/git-remote-url/

$Url = git -C $args[0] config --get remote.origin.url 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: This git repository has no remote defined or the name differs from ""origin"""
    $Url = "Unknown"
}
$Url = TruncateString $Url 255

########
# Branch
########
# References:
# https://stackoverflow.com/a/12142066 

$Branch = git -C $args[0] branch --show-current 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: The local repository appears to be in a headless state. Please checkout a branch"
    $Branch = "Unknown"
}
$Branch = TruncateString $Branch 80

###################################
# Tag, Additional Commits, Describe
###################################
# References:
# "Most recent tag" https://stackoverflow.com/a/7261049
# "Catching exceptions" https://stackoverflow.com/a/32287181
# "Suppressing outputs" https://stackoverflow.com/a/57548278

$Tag = git -C $args[0] describe --tags --abbrev=0 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: No tags have been created on this branch"
    $Tag = "None"
    $Describe = "None"
    $AdditionalCommits = 0
}
else {
    $Describe = git -C $args[0] describe --tags 2> $Null
    if($Describe.Replace($Tag,"").Split("-").Length -ne 3) {
        Write-Host "BuildVersion: Git describe is unable to determine the number of additional commits"
        $AdditionalCommits = 0
    }
    else {$AdditionalCommits = $Describe.Replace($Tag,"").Split("-")[1]}
}
$Tag = TruncateString $Tag 80
$Describe = TruncateString $Describe 80

######
# Sha1
######
# References:
# https://www.systutorials.com/how-to-get-the-latest-git-commit-sha-1-in-a-repository/

$Sha1 = git -C $args[0] rev-parse HEAD 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: Unable to determine latest secure hash"
    $Sha1 = "Unknown"
}
$Sha1 = TruncateString $Sha1 80

#####################
# Uncommitted Changes
#####################

$UncommittedChanges = git -C $args[0] diff --shortstat 2> $Null
if($UncommittedChanges.Length -eq 0) {$UncommittedChanges = "None"}
$UncommittedChanges = TruncateString $UncommittedChanges 80

######
# Date
######

$GitDate = git -C $args[0] log -1 --format=%cd --date=iso 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: Unable to determine latest commit date"
    $CommitDate = "2000-01-01-00:00:00"
}
else {$CommitDate = Get-Date $GitDate -Format "yyyy-MM-dd-HH:mm:ss"}

##############################
# Commit Author Name and Email
##############################
# References:
# https://stackoverflow.com/a/41548774

$CommitAuthorName = git -C $Args[0] log -1 --pretty=format:'%an' 2> $Null
$CommitAuthorEmail = git -C $Args[0] log -1 --pretty=format:'%ae' 2> $Null
if($LASTEXITCODE -ne 0) {
    Write-Host "BuildVersion: Unable to determine latest commit author"
    $CommitAuthorName = "Unknown"
    $CommitAuthorEmail = "Unknown"
}
$CommitAuthorName = TruncateString $CommitAuthorName 80
$CommitAuthorEmail = TruncateString $CommitAuthorEmail 80

################################################################################
################################################################################
################################################################################
# Project References
################################################################################
################################################################################
################################################################################
$ASVersion = TruncateString $args[1] 80
$UserName = TruncateString $args[2] 80
$ProjectName = TruncateString $args[3] 80
$Configuration = TruncateString $args[4] 80
$BuildMode = TruncateString $args[5] 80
$BuildDate = Get-Date -Format "yyyy-MM-dd-HH:mm:ss"

################################################################################
################################################################################
################################################################################
# Output
################################################################################
################################################################################
################################################################################

################
# Initialization
################
$GitInit = "(Url:='$Url',Branch:='$Branch',Tag:='$Tag',AdditionalCommits:=$AdditionalCommits,Sha1:='$Sha1',Describe:='$Describe',UncommittedChanges:='$UncommittedChanges',CommitDate:=DT#$CommitDate,CommitAuthorName:='$CommitAuthorName',CommitAuthorEmail:='$CommitAuthorEmail')"
$ProjectInit = "(ASVersion:='$ASVersion',UserName:='$UserName',ProjectName:='$ProjectName',Configuration:='$Configuration',BuildMode:='$BuildMode',BuildDate:=DT#$BuildDate)"
$BuildVersionInit = "(Git:=$GitInit,Project:=$ProjectInit)"

###################################
# Check global variable declaration
###################################
$GlobalOption = $False
if([System.IO.File]::Exists($GlobalVariableFile)) {
    $GlobalVariableContent = Get-Content $GlobalVariableFile
    $GlobalVariableMatch = [regex]::Match($GlobalVariableContent, "([a-zA-Z_][a-zA-Z_0-9]+)\s*:\s*$TypeIdentifier\s*(:=[^;]+)?;")
    if($GlobalVariableMatch.Success) {
        $GlobalVariableIdentifier = $GlobalVariableMatch.Groups[1]
        Write-Host "BuildVersion: Writing version information to $GlobalVariableIdentifier of type $TypeIdentifier in file $GlobalVariableFile"
        Set-Content -Path $GlobalVariableFile $GlobalVariableContent.Replace($GlobalVariableMatch.Value, "$GlobalVariableIdentifier : $TypeIdentifier := $BuildVersionInit;")
        $GlobalOption = $True 
    }
}

####################################
# Generate Variable Declaration File
####################################

if((-not $GlobalOption) -and (-not [System.IO.Directory]::Exists($LocalProgramDirectory))) {
    Write-Host "BuildVersion: Create Structured Text program $LocalProgramDirectory or declare global variable of type $TypeIdentifier in $GlobalVariableFile"
    return
}

if([System.IO.Directory]::Exists($LocalProgramDirectory)) {
    $FileContent = @"
(*This file was automatically generated by $ScriptName on $BuildDate.*)
(*Do not modify the contents of this file.*)
VAR
    BuildVersion : BuildVersionType := $BuildVersionInit;
END_VAR
"@

    Set-Content -Path $LocalVariableFile $FileContent
}

Write-Host "BuildVersion: Completed $ScriptName powershell script"
